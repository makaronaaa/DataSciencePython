# -*- coding: utf-8 -*-
"""book_pandas_HW1_677.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hA1cpWrygLaHuqTiF3bsdbDiUAimPZbN
"""

# 1. load the dataset csv file using Pandas
import pandas as pd
import csv
import numpy
#df = pd.read_csv('books scraped.csv')
#df = pd.read_csv('C:/Users/WELCOME/Desktop/zomato.csv',encoding="ISO-8859-1")
df=pd.read_csv("/content/sample_data/books_scraped.csv")
print(f"Dataframe is \n{df}")

#print(df)

# 2. compute the median price PM of a book
PM = df['Price'].median()
print(PM)

# 3. suppose we divide all books into 2 groups: ”cheap” books with prices less than PM 
# & ”expensive” books with prices more than PM. What is the average price in each group&
#what is the median price in group?
#Which one is larger for each group.


cheap = df["Price"][df['Price']< PM] 
expensive = df["Price"][df['Price']>PM] 

print(cheap)
print(expensive)

# 4. What is the average price in each group&
avg_cheap= cheap.mean()
print("Average cheap =", avg_cheap)

avg_expensive = expensive.mean()
print('Average expensive =',avg_expensive)

#what is the median price in group?
median_cheap= cheap.median()
print("Median cheap =", median_cheap)

median_expensive = expensive.median()
print('Median expensive =',median_expensive)

#Which one is larger for each group.
if avg_cheap < median_cheap:
    print("Mean of cheap book is less than median of cheap books  \n")
else:
    print('Mean of cheap is greater than median of cheap book \n')
if avg_expensive < median_expensive:
    print("Mean of expensive book is less than median of expensive books  \n")
else:
    print('Mean of expensive book is greater than median of expensive book \n')

# 4.compute average price of a book by Star Rating

df=pd.read_csv("/content/sample_data/books_scraped.csv")
df1= df[['Price','Star_rating']]
#print(df1)

avg = df1.groupby('Star_rating').mean()
print("average price of a book by Star Rating is = ", avg)

#5. compute average price of a book by Book Category
df2= df[['Price','Book_category']]
#print(df2)

avg = df2.groupby('Book_category').mean()
print("average price of a book by Book_category is = ", avg)

# 6. compute average price of a book by Book Category and Star Rating

df3= df[['Price','Book_category','Star_rating']]
#print(df3)

avg = df3.groupby(['Book_category','Star_rating']).mean()
print("average price of a book by Book_category & Star rating is = ", avg)

# 7. assume that Quantity reflects the demand. For each Book Category, 
# compute the average demand (round the result to integers). 
# What are the top 3 Book Categories by this criteria?

df4= df[['Quantity','Book_category']]
print(df4)
avg = df4.groupby(['Quantity','Book_category']).mean()
print('Average = ', avg)
Top = df4.groupby(['Book_category'])['Quantity'].mean().nlargest(3)
print(Top)

#8. which column is redundant and why?
'Stock' column is redundant because we can also figure out if a book is in stock by checking if the value of 'Quantity' is non-zero.